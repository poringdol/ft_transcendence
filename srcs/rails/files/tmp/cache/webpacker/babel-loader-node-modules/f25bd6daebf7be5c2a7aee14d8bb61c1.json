{"ast":null,"code":"var _require = require(\"underscore\"),\n    result = _require.result;\n\n$(function () {\n  window.App = {\n    Models: {},\n    Views: {},\n    Collections: {}\n  }; // -----------------------------------------\n  //  TOURNAMENTS       MODEL and COLLECTION\n  // -----------------------------------------\n\n  App.Models.Tournament = Backbone.Model.extend({\n    urlRoot: \"/tournaments\",\n    initialize: function initialize() {}\n  });\n  App.Collections.Tournament = Backbone.Collection.extend({\n    model: App.Models.Tournament,\n    url: \"/tournaments\",\n    initialize: function initialize() {\n      this.fetch();\n    }\n  }); // ---------------------------------------------------------------------------------------------------------------------------\n  //                                             TOURNAMENTS TABLE\n  // ---------------------------------------------------------------------------------------------------------------------------\n  // -----------------------------------------\n  //  VIEW OF ONE TABLE\n  // -----------------------------------------\n\n  App.Views.TableTournaments = Backbone.View.extend({\n    template: _.template($(\"#TournamentsTableTemplate\").html()),\n    initialize: function initialize(data) {\n      this.collection = data.collection;\n      this.type = data.type;\n      this.collection.on('sync', this.render, this);\n    },\n    render: function render() {\n      this.$el.html(this.template({\n        type: this.type\n      }));\n      $(\"#\" + this.type + \"Tournaments\").html(this.el);\n      tournaments = new App.Views.Tournaments({\n        collection: this.collection,\n        type: this.type\n      });\n      tournaments.render();\n      return this;\n    }\n  }); // -----------------------------------------\n  //  VIEW OF INNER OF ONE TABLE\n  // -----------------------------------------\n\n  App.Views.Tournaments = Backbone.View.extend({\n    tagName: 'tbody',\n    initialize: function initialize(data) {\n      this.collection = data.collection;\n      this.type = data.type;\n    },\n    render: function render() {\n      this.collection.each(this.addOne, this);\n      $(\"#\" + this.type + \"TournamentsTable\").append(this.el);\n      return this;\n    },\n    addOne: function addOne(tournament) {\n      if (this.type == 'History') {\n        if (tournament.get('is_end') == true) {\n          var row = new App.Views.Tournament({\n            model: tournament,\n            type: this.type\n          });\n          this.$el.append(row.render().el);\n        }\n      } else if (this.type == 'Current') {\n        if (tournament.get('is_inprogress') == true && tournament.get('is_end') == false) {\n          var row = new App.Views.Tournament({\n            model: tournament,\n            type: this.type\n          });\n          this.$el.append(row.render().el);\n        }\n      } else if (this.type == 'Planned') {\n        if (tournament.get('is_inprogress') == false && tournament.get('is_end') == false) {\n          var row = new App.Views.Tournament({\n            model: tournament,\n            type: this.type\n          });\n          this.$el.append(row.render().el);\n        }\n      }\n    }\n  }); // -----------------------------------------\n  //  VIEW OF ONE ROW\n  // -----------------------------------------\n\n  App.Views.Tournament = Backbone.View.extend({\n    template: _.template($(\"#TournamentsRowTemplate\").html()),\n    tagName: 'tr',\n    initialize: function initialize(data) {\n      this.model = data.model;\n      this.model.attributes.type = data.type;\n      this.model.on('sync', this.render, this);\n    },\n    events: {\n      'click #PlannedJoinTournament': 'join'\n    },\n    render: function render() {\n      this.model.attributes.start_date = new Date(this.model.attributes.start);\n      this.model.attributes.end_date = new Date(this.model.attributes.end);\n      this.model.attributes.addon_type = '';\n      if (this.model.attributes.addons.addon3 == true) this.model.attributes.addon_type = 'boost ';\n      if (this.model.attributes.addons.addon1 == true) this.model.attributes.addon_type += 'disco';else if (this.model.attributes.addons.addon2 == true) this.model.attributes.addon_type += 'epilepsy';\n      if (this.model.attributes.addon_type == '') this.model.attributes.addon_type = 'none';\n      this.$el.html(this.template(this.model.attributes));\n      if (this.model.attributes.type == 'Planned') this.$el[0].innerHTML = this.$el[0].innerHTML.replace('style=\"display: none\"', '');\n      return this;\n    },\n    join: function join() {\n      var _this = this;\n\n      var tournament_user = {\n        tournament_id: this.model.attributes.id\n      };\n      fetch(\"/tournaments/join\", {\n        method: \"POST\",\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(tournament_user)\n      }).then(function (res) {\n        return res.json();\n      }).then(_.bind(function (res) {\n        if (res.error) alert(res.error);else {\n          alert('You successfully joined a tournament!');\n          _this.model.attributes.members.count += 1;\n\n          _this.render();\n        }\n      }, this));\n    }\n  });\n  /*\n  ** Выпадающий список со всеми пользователями для формы создания матча\n  */\n\n  App.Models.AllGuilds = Backbone.Model.extend({\n    urlRoot: \"/guilds_list\"\n  });\n  App.Collections.AllGuilds = Backbone.Collection.extend({\n    url: \"/guilds_list\",\n    model: App.Models.AllGuilds,\n    initialize: function initialize() {\n      this.fetch();\n    }\n  });\n  App.Views.AllGuilds = Backbone.View.extend({\n    initialize: function initialize() {\n      this.collection.on('sync', this.render, this);\n    },\n    render: function render() {\n      $('#formGuild2Name').css('color', 'rgba(0, 0, 0, 0.55)');\n      $('#formGuild2Name').append(\"<option value='' disabled selected>Guildname of your opponent</option>\");\n      this.collection.each(function (it) {\n        var name = it.get(\"name\");\n        $('#formGuild2Name').append(\"<option value='\".concat(name, \"'>\").concat(name, \"</option>\"));\n      });\n      return this;\n    }\n  }); // ---------------------------------------------------------------------------------------------------------------------------\n  //                                           TOURNAMENTS CREATION FORM\n  // ---------------------------------------------------------------------------------------------------------------------------\n\n  App.Views.FormTournament = Backbone.View.extend({\n    template: _.template($(\"#TournamentCreateTemplate\").html()),\n    initialize: function initialize() {\n      this.$el.html(this.template());\n      $(\"#TournamentCreationForm\").html(this.el);\n    },\n    events: {\n      'submit': 'submit'\n    },\n    submit: function submit(e) {\n      var _this2 = this;\n\n      e.preventDefault();\n      var tournament = {\n        name: $(e.currentTarget).find('input[id=formTournamentName]').val(),\n        date_start: $(e.currentTarget).find('input[id=formTournamentDateStart]').val(),\n        time_start: $(e.currentTarget).find('input[id=formTournamentTimeStart]').val(),\n        date_end: $(e.currentTarget).find('input[id=formTournamentDateEnd]').val(),\n        time_end: $(e.currentTarget).find('input[id=formTournamentTimeEnd]').val(),\n        color: $(e.currentTarget).find('input[name=\"radioColor\"]:checked').val(),\n        boost: $('#AddonBoost').is(':checked') ? $('#AddonBoost').val() : '',\n        prize: $(e.currentTarget).find('input[id=formPrize]').val()\n      };\n      if (tournament.prize == '') tournament.prize = 0;\n      fetch(\"/tournaments\", {\n        method: \"POST\",\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(tournament)\n      }).then(function (res) {\n        return res.json();\n      }).then(_.bind(function (res) {\n        if (res.error) alert(res.error);else {\n          alert('You successfully created a tournament!');\n\n          _this2.collection.fetch();\n        }\n      }, this));\n    }\n  }); // ---------------------------------------------------------------------------------------------------------------------------\n  //                                            MAIN\n  // ---------------------------------------------------------------------------------------------------------------------------\n\n  var col = new App.Collections.Tournament();\n  new App.Views.FormTournament({\n    collection: col\n  });\n  window.currentTable = new App.Views.TableTournaments({\n    collection: col,\n    type: 'Current'\n  });\n  window.plannedTable = new App.Views.TableTournaments({\n    collection: col,\n    type: 'Planned'\n  });\n  window.historyTable = new App.Views.TableTournaments({\n    collection: col,\n    type: 'History'\n  });\n  var guild_list = new App.Collections.AllGuilds();\n  new App.Views.AllGuilds({\n    collection: guild_list\n  });\n  $(\"#TournamentsTableRefresh\").on(\"click\", function () {\n    col.fetch();\n  });\n}());","map":{"version":3,"sources":["/pingpong/app/javascript/packs/tournaments.js"],"names":["require","result","$","window","App","Models","Views","Collections","Tournament","Backbone","Model","extend","urlRoot","initialize","Collection","model","url","fetch","TableTournaments","View","template","_","html","data","collection","type","on","render","$el","el","tournaments","Tournaments","tagName","each","addOne","append","tournament","get","row","attributes","events","start_date","Date","start","end_date","end","addon_type","addons","addon3","addon1","addon2","innerHTML","replace","join","tournament_user","tournament_id","id","method","headers","body","JSON","stringify","then","res","json","bind","error","alert","members","count","AllGuilds","css","it","name","FormTournament","submit","e","preventDefault","currentTarget","find","val","date_start","time_start","date_end","time_end","color","boost","is","prize","col","currentTable","plannedTable","historyTable","guild_list"],"mappings":"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","sourcesContent":["const { result } = require(\"underscore\");\n\n$(function () {\n\twindow.App = {\n\t\tModels: {},\n\t\tViews: {},\n\t\tCollections: {}\n\t};\n\n\n// -----------------------------------------\n//  TOURNAMENTS       MODEL and COLLECTION\n// -----------------------------------------\n\tApp.Models.Tournament = Backbone.Model.extend({\n\t\turlRoot: \"/tournaments\",\n\t\tinitialize: function () {}\n\t});\n\n\tApp.Collections.Tournament = Backbone.Collection.extend({\n\t\tmodel: App.Models.Tournament,\n\t\turl: \"/tournaments\",\n\t\tinitialize: function () {\n\t\t\tthis.fetch()\n\t\t}\n\t});\n\n// ---------------------------------------------------------------------------------------------------------------------------\n//                                             TOURNAMENTS TABLE\n// ---------------------------------------------------------------------------------------------------------------------------\n\n\t// -----------------------------------------\n\t//  VIEW OF ONE TABLE\n\t// -----------------------------------------\n\tApp.Views.TableTournaments = Backbone.View.extend({\n\t\ttemplate: _.template($(\"#TournamentsTableTemplate\").html()),\n\t\tinitialize: function (data) {\n\t\t\tthis.collection = data.collection\n\t\t\tthis.type = data.type\n\n\t\t\tthis.collection.on('sync', this.render, this)\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html(this.template({ type: this.type }))\n\t\t\t$(\"#\" + this.type + \"Tournaments\").html(this.el)\n\t\t\ttournaments = new App.Views.Tournaments({ collection: this.collection, type: this.type })\n\t\t\ttournaments.render()\n\t\t\treturn this\n\t\t},\n\t})\n\t\n\t\n\t// -----------------------------------------\n\t//  VIEW OF INNER OF ONE TABLE\n\t// -----------------------------------------\n\tApp.Views.Tournaments = Backbone.View.extend({\n\t\ttagName: 'tbody',\n\t\tinitialize: function (data) {\n\t\t\tthis.collection = data.collection\n\t\t\tthis.type = data.type\n\t\t},\n\t\trender: function () {\n\t\t\tthis.collection.each(this.addOne, this)\n\t\t\t$(\"#\" + this.type + \"TournamentsTable\").append(this.el)\n\t\t\treturn this\n\t\t},\n\t\taddOne: function (tournament) {\n\t\t\tif (this.type == 'History') {\n\t\t\t\tif (tournament.get('is_end') == true) {\n\t\t\t\t\tvar row = new App.Views.Tournament({ model: tournament, type: this.type });\n\t\t\t\t\tthis.$el.append(row.render().el);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.type == 'Current') {\n\t\t\t\tif (tournament.get('is_inprogress') == true && tournament.get('is_end') == false) {\n\t\t\t\t\tvar row = new App.Views.Tournament({ model: tournament, type: this.type });\n\t\t\t\t\tthis.$el.append(row.render().el);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.type == 'Planned') {\n\t\t\t\tif (tournament.get('is_inprogress') == false && tournament.get('is_end') == false) {\n\t\t\t\t\tvar row = new App.Views.Tournament({ model: tournament, type: this.type });\n\t\t\t\t\tthis.$el.append(row.render().el);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\n\t// -----------------------------------------\n\t//  VIEW OF ONE ROW\n\t// -----------------------------------------\n\tApp.Views.Tournament = Backbone.View.extend({\n\t\ttemplate: _.template($(\"#TournamentsRowTemplate\").html()),\n\t\ttagName: 'tr',\n\t\tinitialize: function (data) {\n\t\t\tthis.model = data.model\n\t\t\tthis.model.attributes.type = data.type\n\n\t\t\tthis.model.on('sync', this.render, this)\n\t\t},\n\t\tevents: {\n\t\t\t'click #PlannedJoinTournament': 'join'\n\t\t},\n\t\trender: function () {\n\t\t\tthis.model.attributes.start_date = new Date(this.model.attributes.start)\n\t\t\tthis.model.attributes.end_date = new Date(this.model.attributes.end)\n\t\t\tthis.model.attributes.addon_type = ''\n\t\t\tif (this.model.attributes.addons.addon3 == true)\n\t\t\t\tthis.model.attributes.addon_type = 'boost '\n\t\t\tif (this.model.attributes.addons.addon1 == true)\n\t\t\t\tthis.model.attributes.addon_type += 'disco'\n\t\t\telse if (this.model.attributes.addons.addon2 == true)\n\t\t\t\tthis.model.attributes.addon_type += 'epilepsy'\n\t\t\tif (this.model.attributes.addon_type == '')\n\t\t\t\tthis.model.attributes.addon_type = 'none'\n\t\t\tthis.$el.html(this.template(this.model.attributes))\n\t\t\tif (this.model.attributes.type == 'Planned')\n\t\t\t\tthis.$el[0].innerHTML = this.$el[0].innerHTML.replace('style=\"display: none\"', '')\n\t\t\treturn this;\n\t\t},\n\t\tjoin: function () {\n\t\t\tlet tournament_user = {\n\t\t\t\ttournament_id: this.model.attributes.id\n\t\t\t}\n\t\t\tfetch(\"/tournaments/join\", {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: {\n\t\t\t\t\t'Accept': 'application/json',\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify(tournament_user)\n\t\t\t})\n\t\t\t\t.then(res => res.json())\n\t\t\t\t.then(_.bind((res) => {\n\t\t\t\t\tif (res.error)\n\t\t\t\t\t\talert(res.error)\n\t\t\t\t\telse {\n\t\t\t\t\t\talert('You successfully joined a tournament!')\n\t\t\t\t\t\tthis.model.attributes.members.count += 1\n\t\t\t\t\t\tthis.render()\n\t\t\t\t\t}\n\t\t\t\t}, this))\n\t\t}\n\t});\n\n/*\n** Выпадающий список со всеми пользователями для формы создания матча\n*/\n\tApp.Models.AllGuilds = Backbone.Model.extend({ urlRoot: \"/guilds_list\" })\n\tApp.Collections.AllGuilds = Backbone.Collection.extend({\n\t\turl: \"/guilds_list\",\n\t\tmodel: App.Models.AllGuilds,\n\t\tinitialize: function() { this.fetch(); },\n\t});\n\n\tApp.Views.AllGuilds = Backbone.View.extend({\n\t\tinitialize: function() {\n\t\t\tthis.collection.on('sync', this.render, this)\n\t\t},\n        render: function () {\n\t\t\t$('#formGuild2Name').css('color', 'rgba(0, 0, 0, 0.55)');\n\t\t\t$('#formGuild2Name').append(`<option value='' disabled selected>Guildname of your opponent</option>`);\n            this.collection.each((it) => {\n\t\t\t\tvar name = it.get(\"name\");\n\t\t\t\t$('#formGuild2Name').append(`<option value='${name}'>${name}</option>`);\n\t\t\t});\n            return this;\n        }\n    });\n\n\n// ---------------------------------------------------------------------------------------------------------------------------\n//                                           TOURNAMENTS CREATION FORM\n// ---------------------------------------------------------------------------------------------------------------------------\n\n\tApp.Views.FormTournament = Backbone.View.extend({\n\t\ttemplate: _.template($(\"#TournamentCreateTemplate\").html()),\n\t\tinitialize: function () {\n\t\t\tthis.$el.html(this.template())\n\t\t\t$(\"#TournamentCreationForm\").html(this.el)\n\t\t},\n\t\tevents: {\n\t\t\t'submit': 'submit'\n\t\t},\n\t\tsubmit: function (e) {\n\t\t\te.preventDefault();\n\t\t\tlet tournament = {\n\t\t\t\tname: \t\t$(e.currentTarget).find('input[id=formTournamentName]').val(),\n\t\t\t\tdate_start: $(e.currentTarget).find('input[id=formTournamentDateStart]').val(),\n\t\t\t\ttime_start: $(e.currentTarget).find('input[id=formTournamentTimeStart]').val(),\n\t\t\t\tdate_end: \t$(e.currentTarget).find('input[id=formTournamentDateEnd]').val(),\n\t\t\t\ttime_end: \t$(e.currentTarget).find('input[id=formTournamentTimeEnd]').val(),\n\t\t\t\tcolor:\t\t$(e.currentTarget).find('input[name=\"radioColor\"]:checked').val(),\n\t\t\t\tboost:\t\t$('#AddonBoost').is(':checked') ? $('#AddonBoost').val() : '',\n\t\t\t\tprize: \t\t$(e.currentTarget).find('input[id=formPrize]').val(),\n\t\t\t}\n\t\t\tif (tournament.prize == '')\n\t\t\t\ttournament.prize = 0\n\t\t\tfetch(\"/tournaments\", {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: {\n\t\t\t\t\t'Accept': 'application/json',\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify(tournament)\n\t\t\t})\n\t\t\t\t.then(res => res.json())\n\t\t\t\t.then(_.bind((res) => {\n\t\t\t\t\tif (res.error)\n\t\t\t\t\t\talert(res.error)\n\t\t\t\t\telse {\n\t\t\t\t\t\talert('You successfully created a tournament!')\n\t\t\t\t\t\tthis.collection.fetch()\n\t\t\t\t\t}\n\t\t\t\t}, this))\n\t\t},\n\t})\n\n// ---------------------------------------------------------------------------------------------------------------------------\n//                                            MAIN\n// ---------------------------------------------------------------------------------------------------------------------------\n\n\tvar col = new App.Collections.Tournament()\n\tnew App.Views.FormTournament({ collection: col })\n\twindow.currentTable = new App.Views.TableTournaments({ collection: col, type: 'Current' })\n\twindow.plannedTable = new App.Views.TableTournaments({ collection: col, type: 'Planned' })\n\twindow.historyTable = new App.Views.TableTournaments({ collection: col, type: 'History' })\n\t\n\tvar guild_list = new App.Collections.AllGuilds()\n\tnew App.Views.AllGuilds({ collection: guild_list });\n\t$(\"#TournamentsTableRefresh\").on(\"click\", function () { col.fetch(); })\n\n}());\n"]},"metadata":{},"sourceType":"module"}