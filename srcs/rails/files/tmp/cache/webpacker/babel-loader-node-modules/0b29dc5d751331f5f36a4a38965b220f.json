{"ast":null,"code":"// $(function(){\n//  'use strict';\n// \tconst KEYS = {start: 13, up: 87, down: 83};\n// \tconst MATCH_ID = $(\"#MatchID\").attr(\"data-MatchID\");\n// \twindow.App = {\n// \t\tModels: {},\n// \t\tViews: {},\n// \t\tCollections: {},\n// \t\tRouter: {}\n// \t};\n//  //  MATCH              MODEL\n// \tApp.Models.Match = Backbone.Model.extend({\n// \t\turlRoot: `/matches/match_users/${MATCH_ID}.json`,\n// \t\tinitialize: function () { this.fetch(); }\n//  \t})\n//  //  MATCH              VIEW\n//  \tApp.Views.Match = Backbone.View.extend({\n// \t\ttemplate_score: _.template($(\"#MatchScoreTemplate\").html()),\n// \tinitialize: function () {\n// \t\tthis.model.on(\"sync\", this.start_game, this);\n// \t\tthis.model.on(\"change\", this.render_score, this);\n// \t},\n// \tstart_game: function () {\n// \t\twindow.game = new Game(this.model);\n// \t\tgame.startGame();\n// \t\tconsole.log(this.model);\n// \t\tthis.render_score();\n// \t},\n// \trender_score: function () {\n// \t\tvar template = this.template_score(this.model.attributes);\n// \t\tthis.$el.html(template);\n// \t\t$(\"#MatchScore\").html(this.el);\n// \t}\n//  })\n//  // SCORE        VIEW\n//  //Опишем наши игровые объекты + научим их рисовать себя на канвасе и передвигаться\n// \tvar Ball = function () {\n// \t\treturn {\n// \t\t\tradius: 8,\n// \t\t\tcolor: '#FFCC00',\n// \t\t\tx: 0,\n// \t\t\ty: 0,\n// \t\t\tyspeed: 5,\n// \t\t\txspeed: 7,\n// \t\t\tbounce: 1.1, //коофицент упругости - для ускорения шарика после отскока\n// \t\t\trender: function (ctx) {\n// \t\t\tctx.beginPath();\n// \t\t\tctx.arc(this.x, this.y, this.radius, 0, 2*Math.PI);\n// \t\t\tctx.fillStyle = this.color;\n// \t\t\tctx.fill();\n// \t\t\t},\n// \t\t\t//Передвижение шара всегда происходит с определенной скоростью \n// \t\t\t//поэтому мы не будем передавть x y для кастомного перемещения.\n// \t\t\tmove: function () {\n// \t\t\tthis.x = this.x + this.xspeed;\n// \t\t\tthis.y = this.y + this.yspeed;\n// \t\t\t}\n// \t\t}\n// \t};\n// \t//Блоки для отбивания шарика\n// \tvar Bracket = function () {\n// \t\treturn {\n// \t\t\tw: 10,\n// \t\t\th: 100,\n// \t\t\tx: 0,\n// \t\t\ty: 0,\n// \t\t\tspeed: 50,\n// \t\t\tcolor: '#CCFF00',\n// \t\t\trender: function (ctx) {\n// \t\t\tctx.fillStyle = this.color;\n// \t\t\tctx.fillRect(this.x, this.y, this.w, this.h);\n// \t\t\t}\n// \t\t}\n// \t};\n//  //Собственно сам игрок с его свойствами\n// \tvar Player = function () {\n// \t\treturn {\n// \t\t\trate: 0\n// \t\t};\n// \t};\n//  //Теперь сама игра\n// \tvar Game = function (curr_match) {\n// \t\t//Сохраним ссылку на контекст\n// \t\t//для дальнейшей передачи в ивенты\n// \t\tvar _this = this;\n// \t\t//Параметры с которыми будет игра\n// \t\tthis.params = {\n// \t\t\twidth: 960,\n// \t\t\theight: 600,\n// \t\t\tstate: 'loading', //Состояние игры\n// \t\t\tmaxRate: 10 //до скольки будет идти матч.\n// \t};\n// \t//Сохраняем ссылки на canvas и контекст для дальнейшего рисования\n// \tthis.canvasBlock = document.getElementById('pingpong');\n// \tthis.ctx = this.canvasBlock.getContext('2d');\n// \t//Подписываемся на события кнопок, если пользователь участник игры\n// \tlet player = curr_match.get(\"current_user\").id == curr_match.get(\"player1\").id ? 1 :\n// \t\t\t\t\t\t\t curr_match.get(\"current_user\").id == curr_match.get(\"player2\").id ? 2 : 0;\n// \tif (player > 0) {\n// \t\tdocument.addEventListener('keydown', function (event) {\n// \t\t\t_this.keyDownEvent.call(_this, event, curr_match, player);\n// \t\t});\n// \t\t// var keeDown = function (event) { _this.keyDownEvent.call(_this, event, curr_match, player); }\n// \t\t// document.addEventListener('keydown', _.throttle(keeDown, 100));\n// \t}\n// \treturn this;\n//  };\n//  //В прототип будем писать методы всякие игровые\n//  \tGame.prototype = {\n// \t\t//Старт игры\n// \t\tstartGame: function () {\n// \t\t\tvar _this = this;\n// \t\t\t//Инициализируем игровые объекты\n// \t\t\tthis.objects = {\n// \t\t\tball: new Ball(),\n// \t\t\tplayer1: new Player(),\n// \t\t\tplayer2: new Player(),\n// \t\t\tbracket1: new Bracket(),\n// \t\t\tbracket2: new Bracket()\n// \t\t\t};\n// \t\t\t//Меняем состояние\n// \t\t\tthis.params.state = 'game';\n// \t\t\t//Расставляем стартовые позиции ракеток\n// \t\t\tthis.objects.bracket1.x = 50;\n// \t\t\tthis.objects.bracket1.y = this.params.height / 2 - this.objects.bracket1.h / 2;\n// \t\t\tthis.objects.bracket2.x = this.params.width - 50;\n// \t\t\tthis.objects.bracket2.y = this.params.height / 2 - this.objects.bracket1.h / 2;\n// \t\t\tthis.params.lastGoalPlayer = 1;\n// \t\t\t//Перекрасим второго игрока\n// \t\t\tthis.objects.bracket2.color = '#00FFCC';\n// \t\t\t//Запускаем игровой цикл\n// \t\t\tthis.loop();\n// \t\t},\n// \t\t//Игровой цикл\n// \t\tloop: function () {\n// \t\t\tvar _this = this;\n// \t\t\t//Логика игры\n// \t\t\tthis.logic();\n// \t\t\t//Физика игры\n// \t\t\tthis.physic();\n// \t\t\t//Рендер игры\n// \t\t\tthis.render();\n// \t\t\t//Используем замыкание для передачи контекста\n// \t\t\tthis.requestLoop = requestAnimationFrame(function(){\n// \t\t\t\t_this.loop.call(_this);\n// \t\t\t});\n// \t\t},\n// \t\t//Логика игры\n// \t\tlogic: function () {\n// \t\t\t//Для краткости записи\n// \t\t\tvar ball = game.objects.ball;\n// \t\t\t//Если сейчас идет игра\n// \t\t\tif(this.params.state == 'game') {\n// \t\t\t//И шарик оказался за первым игроком\n// \t\t\tif (ball.x + ball.radius/2 < 0) {\n// \t\t\t\t//Засчтитаем гол\n// \t\t\t\tthis.objects.player2.rate++;\n// \t\t\t\tlet score = match_model.get(\"player1_score\");\n// \t\t\t\tmatch_model.set(\"player1_score\", score + 1);\n// \t\t\t\tmatch_model.save()\n// \t\t\t\t//Сменим состояние игры\n// \t\t\t\tthis.params.state = 'playerwait';\n// \t\t\t\t//Сохарним информацию о забившем\n// \t\t\t\tthis.params.lastGoalBracket = this.objects.bracket2;\n// \t\t\t\tthis.params.lastGoalPlayer = 2;\n// \t\t\t}\n// \t\t\t//Шарик оказался за выторым игроком\n// \t\t\tif (ball.x + ball.radius/2 > game.params.width) {\n// \t\t\t\t//Засчтитаем гол\n// \t\t\t\tthis.objects.player1.rate++;\n// \t\t\t\tlet score = match_model.get(\"player2_score\");\n// \t\t\t\tmatch_model.set(\"player2_score\", score + 1);\n// \t\t\t\tmatch_model.save()\n// \t\t\t\t//Сменим состояние игры\n// \t\t\t\tthis.params.state = 'playerwait';\n// \t\t\t\t//Сохарним информацию о забившем\n// \t\t\t\tthis.params.lastGoalBracket = this.objects.bracket1;\n// \t\t\t\tthis.params.lastGoalPlayer = 1;\n// \t\t\t}\n// \t\t\t//Проверяем наличие победителя\n// \t\t\t//Если кто-то из игроков набрал необходимое количество очков\n// \t\t\t//Он выиграл\n// \t\t\tif(this.objects.player1.rate === this.params.maxRate) {\n// \t\t\t\talert('1 игрок выиграл');\n// \t\t\t\tthis.gameRestart();\n// \t\t\t}\n// \t\t\tif(this.objects.player2.rate === this.params.maxRate) {\n// \t\t\t\talert('2 игрок выиграл');\n// \t\t\t\tthis.gameRestart();\n// \t\t\t}\n// \t\t\t}\n// \t\t},\n// \t\t//Физика игры\n// \t\tphysic: function () {\n// \t\t\t//Для краткости записи\n// \t\t\tvar ball = game.objects.ball,\n// \t\t\tb1 = game.objects.bracket1,\n// \t\t\tb2 = game.objects.bracket2;\n// \t\t\t//Передвигаем шар\n// \t\t\tgame.objects.ball.move();\n// \t\t\t//Отскок слева\n// \t\t\tif (ball.x + ball.radius/2 < 0) {\n// \t\t\t\tgame.objects.ball.xspeed = -game.objects.ball.xspeed;\n// \t\t\t}\n// \t\t\t//Отскок Справа\n// \t\t\tif (ball.x + ball.radius/2 > game.params.width) {\n// \t\t\t\tgame.objects.ball.xspeed = -game.objects.ball.xspeed;\n// \t\t\t}\n// \t\t\t//Отскок от границ canvas по высоте\n// \t\t\tif (ball.y + ball.radius/2 > game.params.height || ball.y + ball.radius/2 < 0) {\n// \t\t\t\tgame.objects.ball.yspeed = -game.objects.ball.yspeed;\n// \t\t\t}\n// \t\t\t//Отскок шарика от 1 блока\n// \t\t\tif(ball.x <= 60 && ball.y >= b1.y && ball.y <= b1.y+b1.h) {\n// \t\t\t\tball.xspeed = -ball.xspeed;\n// \t\t\t//Ускоряем шарик\n// \t\t\t\tball.xspeed = ball.xspeed * ball.bounce;\n// \t\t\t}\n// \t\t\t//Отскок шарика от 2 блока\n// \t\t\tif(ball.x >= this.params.width-50 && ball.y >= b2.y && ball.y <= b2.y+b2.h) {\n// \t\t\t\tball.xspeed = -ball.xspeed;\n// \t\t\t//Ускоряем шарик\n// \t\t\t\tball.xspeed = ball.xspeed * ball.bounce;\n// \t\t\t}\n// \t\t\t//В состоянии ожидания пуска шарика от ракетки игрока, выставляем шарик рядом с ракеткой забившего игрока.\n// \t\t\tif(this.params.state === 'playerwait') {\n// \t\t\tball.xspeed = 0;\n// \t\t\tball.yspeed = 0;\n// \t\t\tif(this.params.lastGoalPlayer === 1) {\n// \t\t\t\tball.x  = this.params.lastGoalBracket.x + this.params.lastGoalBracket.w + ball.radius + 1;\n// \t\t\t\tball.y  = this.params.lastGoalBracket.y + this.params.lastGoalBracket.h/2;\n// \t\t\t}\n// \t\t\tif(this.params.lastGoalPlayer === 2) {\n// \t\t\t\tball.x  = this.params.lastGoalBracket.x - ball.radius - 1;\n// \t\t\t\tball.y  = this.params.lastGoalBracket.y + this.params.lastGoalBracket.h/2;\n// \t\t\t}\n// \t\t\t}\n// \t\t\t//Не позволяем вылезать блокам за canvas и возврщаем их на место\n// \t\t\tif(b1.y <= 0) b1.y = 1; \n// \t\t\tif(b2.y <= 0) b2.y = 1; \n// \t\t\tif(b1.y+b1.h >= this.params.height) b1.y = this.params.height-b1.h;\n// \t\t\tif(b2.y+b2.h >= this.params.height) b2.y = this.params.height-b2.h;\n// \t\t},\n// \t\t//Рендер игры\n// \t\trender: function () {\n// \t\t\t//Чистим канвас на каждом кадре\n// \t\t\tgame.ctx.fillStyle = '#eeeeee';\n// \t\t\tgame.ctx.fillRect(0,0, game.params.width, game.params.height);\n// \t\t\t//Рендерим шарик\n// \t\t\tgame.objects.ball.render(game.ctx);\n// \t\t\tgame.objects.bracket1.render(game.ctx);\n// \t\t\tgame.objects.bracket2.render(game.ctx);\n// \t\t\tgame.renderRate(game.ctx);\n// \t\t},\n// \t\t//Показываем счет игры\n// \t\trenderRate: function (ctx) {\n// \t\t\tvar rateText = game.objects.player1.rate + ' : ' + game.objects.player2.rate;\n// \t\t\tctx.fillStyle = '#000000';\n// \t\t\tctx.font = \"20px Arial\";\n// \t\t\tctx.fillText(rateText,game.params.width/2,50);\n// \t\t},\n// \t\t//Инициализация игровых событий\n// \t\tkeyDownEvent: function (event, curr_match, player) {\n// \t\t\tvar kCode = event.keyCode;\n// \t\t\tif (kCode === KEYS.start && game.params.state === \"playerwait\"\n// \t\t\t\t&& game.params.lastGoalPlayer == player) {\n// \t\t\t$.post(\"/matches/move_bracket/\" + MATCH_ID, { match_id: MATCH_ID,\n// \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey_code: kCode,\n// \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplayer: player });\n// \t\t\t}\n// \t\t\tif (kCode === KEYS.down) {\n// \t\t\t\t\tlet bracket = (player == 1)\n// \t\t\t\t\t\t\t\t\t? game.objects.bracket1.y + game.objects.bracket1.speed\n// \t\t\t\t\t\t\t\t\t: game.objects.bracket2.y + game.objects.bracket2.speed;\n// \t\t\t\t\t$.post(\"/matches/move_bracket/\" + MATCH_ID, { match_id: MATCH_ID,\n// \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey_code: kCode,\n// \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplayer: player,\n// \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbracket: bracket });\n// \t\t\t\t\t}\n// \t\t\t\t\tif (kCode === KEYS.up) {\n// \t\t\t\t\t\t\tlet bracket = (player == 1)\n// \t\t\t\t\t\t\t\t\t\t\t? game.objects.bracket1.y - game.objects.bracket1.speed\n// \t\t\t\t\t\t\t\t\t\t\t: game.objects.bracket2.y - game.objects.bracket2.speed;\n// \t\t\t\t\t\t\t$.post(\"/matches/move_bracket/\" + MATCH_ID, { match_id: MATCH_ID,\n// \t\t\t\t\t\t\t\t\t\t\tkey_code: kCode,\n// \t\t\t\t\t\t\t\t\t\t\tplayer: player,\n// \t\t\t\t\t\t\t\t\t\t\tbracket: bracket });\n// \t\t\t\t\t}\n// \t\t\t\t},\n// \t\t//Пуск шарика после гола\n// \t\tkickBall: function () {\n// \t\t\tthis.objects.ball.xspeed = 3;\n// \t\t\tthis.objects.ball.yspeed = 3;\n// \t\t\tthis.params.state = 'game';\n// \t\t},\n// \t\t//Стоп игра\n// \t\tstopGame: function () {\n// \t\t\t//Обновляем состояние\n// \t\t\tthis.params.state = 'stop';\n// \t\t\t//Останавливаем цикл\n// \t\t\tcancelAnimationFrame(this.requestLoop);\n// \t\t\t//Убираем слушателей событий\n// \t\t\tdocument.removeEventListener('keydown', this.keyDownEvent);\n// \t\t\t//Чистим игровые объекты\n// \t\t\tdelete(this.objects);\n// \t\t},\n// \t\tpauseGame: function () {\n// \t\t\tthis.state = 'pause';\n// \t\t},\n// \t\t\t//Рестарт игры\n// \t\trestartGame: function () {\n// \t\t\tthis.stopGame();\n// \t\t\tthis.startGame();\n// \t\t}\n// \t};\n//  // //При загрузке window, стартуем нашу игру\n// \tlet match_model = new App.Models.Match();\n// \tlet match_view = new App.Views.Match({ model: match_model });\n// }());","map":{"version":3,"sources":["/pingpong/app/javascript/packs/pingpong.js"],"names":[],"mappings":"AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["// $(function(){\n//  'use strict';\n\n// \tconst KEYS = {start: 13, up: 87, down: 83};\n// \tconst MATCH_ID = $(\"#MatchID\").attr(\"data-MatchID\");\n\n// \twindow.App = {\n// \t\tModels: {},\n// \t\tViews: {},\n// \t\tCollections: {},\n// \t\tRouter: {}\n// \t};\n\n//  //  MATCH              MODEL\n// \tApp.Models.Match = Backbone.Model.extend({\n// \t\turlRoot: `/matches/match_users/${MATCH_ID}.json`,\n// \t\tinitialize: function () { this.fetch(); }\n//  \t})\n \n//  //  MATCH              VIEW\n//  \tApp.Views.Match = Backbone.View.extend({\n// \t\ttemplate_score: _.template($(\"#MatchScoreTemplate\").html()),\n\t\n// \tinitialize: function () {\n\n// \t\tthis.model.on(\"sync\", this.start_game, this);\n// \t\tthis.model.on(\"change\", this.render_score, this);\n// \t},\n\n// \tstart_game: function () {\n// \t\twindow.game = new Game(this.model);\n// \t\tgame.startGame();\n// \t\tconsole.log(this.model);\n// \t\tthis.render_score();\n// \t},\n\n// \trender_score: function () {\n// \t\tvar template = this.template_score(this.model.attributes);\n// \t\tthis.$el.html(template);\n// \t\t$(\"#MatchScore\").html(this.el);\n// \t}\n//  })\n\n//  // SCORE        VIEW\n\n\n//  //Опишем наши игровые объекты + научим их рисовать себя на канвасе и передвигаться\n// \tvar Ball = function () {\n// \t\treturn {\n// \t\t\tradius: 8,\n// \t\t\tcolor: '#FFCC00',\n// \t\t\tx: 0,\n// \t\t\ty: 0,\n// \t\t\tyspeed: 5,\n// \t\t\txspeed: 7,\n// \t\t\tbounce: 1.1, //коофицент упругости - для ускорения шарика после отскока\n// \t\t\trender: function (ctx) {\n// \t\t\tctx.beginPath();\n// \t\t\tctx.arc(this.x, this.y, this.radius, 0, 2*Math.PI);\n// \t\t\tctx.fillStyle = this.color;\n// \t\t\tctx.fill();\n// \t\t\t},\n// \t\t\t//Передвижение шара всегда происходит с определенной скоростью \n// \t\t\t//поэтому мы не будем передавть x y для кастомного перемещения.\n// \t\t\tmove: function () {\n// \t\t\tthis.x = this.x + this.xspeed;\n// \t\t\tthis.y = this.y + this.yspeed;\n// \t\t\t}\n// \t\t}\n// \t};\n\n// \t//Блоки для отбивания шарика\n// \tvar Bracket = function () {\n// \t\treturn {\n// \t\t\tw: 10,\n// \t\t\th: 100,\n// \t\t\tx: 0,\n// \t\t\ty: 0,\n// \t\t\tspeed: 50,\n// \t\t\tcolor: '#CCFF00',\n// \t\t\trender: function (ctx) {\n// \t\t\tctx.fillStyle = this.color;\n// \t\t\tctx.fillRect(this.x, this.y, this.w, this.h);\n// \t\t\t}\n// \t\t}\n// \t};\n\n//  //Собственно сам игрок с его свойствами\n// \tvar Player = function () {\n// \t\treturn {\n// \t\t\trate: 0\n// \t\t};\n// \t};\n\n//  //Теперь сама игра\n// \tvar Game = function (curr_match) {\n\n// \t\t//Сохраним ссылку на контекст\n// \t\t//для дальнейшей передачи в ивенты\n// \t\tvar _this = this;\n\t\t\n// \t\t//Параметры с которыми будет игра\n// \t\tthis.params = {\n// \t\t\twidth: 960,\n// \t\t\theight: 600,\n// \t\t\tstate: 'loading', //Состояние игры\n// \t\t\tmaxRate: 10 //до скольки будет идти матч.\n// \t};\n\n// \t//Сохраняем ссылки на canvas и контекст для дальнейшего рисования\n// \tthis.canvasBlock = document.getElementById('pingpong');\n// \tthis.ctx = this.canvasBlock.getContext('2d');\n\n// \t//Подписываемся на события кнопок, если пользователь участник игры\n// \tlet player = curr_match.get(\"current_user\").id == curr_match.get(\"player1\").id ? 1 :\n// \t\t\t\t\t\t\t curr_match.get(\"current_user\").id == curr_match.get(\"player2\").id ? 2 : 0;\n\n// \tif (player > 0) {\n// \t\tdocument.addEventListener('keydown', function (event) {\n// \t\t\t_this.keyDownEvent.call(_this, event, curr_match, player);\n// \t\t});\n// \t\t// var keeDown = function (event) { _this.keyDownEvent.call(_this, event, curr_match, player); }\n// \t\t// document.addEventListener('keydown', _.throttle(keeDown, 100));\n// \t}\n\n// \treturn this;\n//  };\n\n//  //В прототип будем писать методы всякие игровые\n//  \tGame.prototype = {\n// \t\t//Старт игры\n// \t\tstartGame: function () {\n\n// \t\t\tvar _this = this;\n\n// \t\t\t//Инициализируем игровые объекты\n// \t\t\tthis.objects = {\n// \t\t\tball: new Ball(),\n// \t\t\tplayer1: new Player(),\n// \t\t\tplayer2: new Player(),\n// \t\t\tbracket1: new Bracket(),\n// \t\t\tbracket2: new Bracket()\n// \t\t\t};\n// \t\t\t//Меняем состояние\n// \t\t\tthis.params.state = 'game';\n\n// \t\t\t//Расставляем стартовые позиции ракеток\n// \t\t\tthis.objects.bracket1.x = 50;\n// \t\t\tthis.objects.bracket1.y = this.params.height / 2 - this.objects.bracket1.h / 2;\n\t\t\t\n// \t\t\tthis.objects.bracket2.x = this.params.width - 50;\n// \t\t\tthis.objects.bracket2.y = this.params.height / 2 - this.objects.bracket1.h / 2;\n\n// \t\t\tthis.params.lastGoalPlayer = 1;\n\n// \t\t\t//Перекрасим второго игрока\n// \t\t\tthis.objects.bracket2.color = '#00FFCC';\n\t\t\t\n// \t\t\t//Запускаем игровой цикл\n// \t\t\tthis.loop();\n// \t\t},\n\n// \t\t//Игровой цикл\n// \t\tloop: function () {\n// \t\t\tvar _this = this;\n\t\t\t\n// \t\t\t//Логика игры\n// \t\t\tthis.logic();\n// \t\t\t//Физика игры\n// \t\t\tthis.physic();\n// \t\t\t//Рендер игры\n// \t\t\tthis.render();\n\n// \t\t\t//Используем замыкание для передачи контекста\n// \t\t\tthis.requestLoop = requestAnimationFrame(function(){\n// \t\t\t\t_this.loop.call(_this);\n// \t\t\t});\n// \t\t},\n\n// \t\t//Логика игры\n// \t\tlogic: function () {\n\n// \t\t\t//Для краткости записи\n// \t\t\tvar ball = game.objects.ball;\n\n// \t\t\t//Если сейчас идет игра\n// \t\t\tif(this.params.state == 'game') {\n\n// \t\t\t//И шарик оказался за первым игроком\n// \t\t\tif (ball.x + ball.radius/2 < 0) {\n// \t\t\t\t//Засчтитаем гол\n// \t\t\t\tthis.objects.player2.rate++;\n// \t\t\t\tlet score = match_model.get(\"player1_score\");\n// \t\t\t\tmatch_model.set(\"player1_score\", score + 1);\n// \t\t\t\tmatch_model.save()\n// \t\t\t\t//Сменим состояние игры\n// \t\t\t\tthis.params.state = 'playerwait';\n// \t\t\t\t//Сохарним информацию о забившем\n// \t\t\t\tthis.params.lastGoalBracket = this.objects.bracket2;\n// \t\t\t\tthis.params.lastGoalPlayer = 2;\n// \t\t\t}\n\n// \t\t\t//Шарик оказался за выторым игроком\n// \t\t\tif (ball.x + ball.radius/2 > game.params.width) {\n// \t\t\t\t//Засчтитаем гол\n// \t\t\t\tthis.objects.player1.rate++;\n// \t\t\t\tlet score = match_model.get(\"player2_score\");\n// \t\t\t\tmatch_model.set(\"player2_score\", score + 1);\n// \t\t\t\tmatch_model.save()\n// \t\t\t\t//Сменим состояние игры\n// \t\t\t\tthis.params.state = 'playerwait';\n// \t\t\t\t//Сохарним информацию о забившем\n// \t\t\t\tthis.params.lastGoalBracket = this.objects.bracket1;\n// \t\t\t\tthis.params.lastGoalPlayer = 1;\n// \t\t\t}\n\n// \t\t\t//Проверяем наличие победителя\n// \t\t\t//Если кто-то из игроков набрал необходимое количество очков\n// \t\t\t//Он выиграл\n// \t\t\tif(this.objects.player1.rate === this.params.maxRate) {\n// \t\t\t\talert('1 игрок выиграл');\n// \t\t\t\tthis.gameRestart();\n// \t\t\t}\n\n// \t\t\tif(this.objects.player2.rate === this.params.maxRate) {\n// \t\t\t\talert('2 игрок выиграл');\n// \t\t\t\tthis.gameRestart();\n// \t\t\t}\n// \t\t\t}\n\n// \t\t},\n\n// \t\t//Физика игры\n// \t\tphysic: function () {\n// \t\t\t//Для краткости записи\n// \t\t\tvar ball = game.objects.ball,\n// \t\t\tb1 = game.objects.bracket1,\n// \t\t\tb2 = game.objects.bracket2;\n\t\t\t\n// \t\t\t//Передвигаем шар\n// \t\t\tgame.objects.ball.move();\n\n// \t\t\t//Отскок слева\n// \t\t\tif (ball.x + ball.radius/2 < 0) {\n// \t\t\t\tgame.objects.ball.xspeed = -game.objects.ball.xspeed;\n// \t\t\t}\n// \t\t\t//Отскок Справа\n// \t\t\tif (ball.x + ball.radius/2 > game.params.width) {\n// \t\t\t\tgame.objects.ball.xspeed = -game.objects.ball.xspeed;\n// \t\t\t}\n// \t\t\t//Отскок от границ canvas по высоте\n// \t\t\tif (ball.y + ball.radius/2 > game.params.height || ball.y + ball.radius/2 < 0) {\n// \t\t\t\tgame.objects.ball.yspeed = -game.objects.ball.yspeed;\n// \t\t\t}\n\n\t\t\t\n// \t\t\t//Отскок шарика от 1 блока\n// \t\t\tif(ball.x <= 60 && ball.y >= b1.y && ball.y <= b1.y+b1.h) {\n// \t\t\t\tball.xspeed = -ball.xspeed;\n// \t\t\t//Ускоряем шарик\n// \t\t\t\tball.xspeed = ball.xspeed * ball.bounce;\n// \t\t\t}\n// \t\t\t//Отскок шарика от 2 блока\n// \t\t\tif(ball.x >= this.params.width-50 && ball.y >= b2.y && ball.y <= b2.y+b2.h) {\n// \t\t\t\tball.xspeed = -ball.xspeed;\n// \t\t\t//Ускоряем шарик\n// \t\t\t\tball.xspeed = ball.xspeed * ball.bounce;\n// \t\t\t}\n\n// \t\t\t//В состоянии ожидания пуска шарика от ракетки игрока, выставляем шарик рядом с ракеткой забившего игрока.\n// \t\t\tif(this.params.state === 'playerwait') {\n// \t\t\tball.xspeed = 0;\n// \t\t\tball.yspeed = 0;\n// \t\t\tif(this.params.lastGoalPlayer === 1) {\n// \t\t\t\tball.x  = this.params.lastGoalBracket.x + this.params.lastGoalBracket.w + ball.radius + 1;\n// \t\t\t\tball.y  = this.params.lastGoalBracket.y + this.params.lastGoalBracket.h/2;\n// \t\t\t}\n// \t\t\tif(this.params.lastGoalPlayer === 2) {\n// \t\t\t\tball.x  = this.params.lastGoalBracket.x - ball.radius - 1;\n// \t\t\t\tball.y  = this.params.lastGoalBracket.y + this.params.lastGoalBracket.h/2;\n// \t\t\t}\n// \t\t\t}\n\n// \t\t\t//Не позволяем вылезать блокам за canvas и возврщаем их на место\n// \t\t\tif(b1.y <= 0) b1.y = 1; \n// \t\t\tif(b2.y <= 0) b2.y = 1; \n// \t\t\tif(b1.y+b1.h >= this.params.height) b1.y = this.params.height-b1.h;\n// \t\t\tif(b2.y+b2.h >= this.params.height) b2.y = this.params.height-b2.h;\n// \t\t},\n\n// \t\t//Рендер игры\n// \t\trender: function () {\n// \t\t\t//Чистим канвас на каждом кадре\n// \t\t\tgame.ctx.fillStyle = '#eeeeee';\n// \t\t\tgame.ctx.fillRect(0,0, game.params.width, game.params.height);\n\n// \t\t\t//Рендерим шарик\n// \t\t\tgame.objects.ball.render(game.ctx);\n// \t\t\tgame.objects.bracket1.render(game.ctx);\n// \t\t\tgame.objects.bracket2.render(game.ctx);\n// \t\t\tgame.renderRate(game.ctx);\n// \t\t},\n\t\t\n// \t\t//Показываем счет игры\n// \t\trenderRate: function (ctx) {\n// \t\t\tvar rateText = game.objects.player1.rate + ' : ' + game.objects.player2.rate;\n// \t\t\tctx.fillStyle = '#000000';\n// \t\t\tctx.font = \"20px Arial\";\n// \t\t\tctx.fillText(rateText,game.params.width/2,50);\n// \t\t},\n\n// \t\t//Инициализация игровых событий\n// \t\tkeyDownEvent: function (event, curr_match, player) {\n// \t\t\tvar kCode = event.keyCode;\n\n// \t\t\tif (kCode === KEYS.start && game.params.state === \"playerwait\"\n// \t\t\t\t&& game.params.lastGoalPlayer == player) {\n// \t\t\t$.post(\"/matches/move_bracket/\" + MATCH_ID, { match_id: MATCH_ID,\n// \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey_code: kCode,\n// \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplayer: player });\n// \t\t\t}\n// \t\t\tif (kCode === KEYS.down) {\n// \t\t\t\t\tlet bracket = (player == 1)\n// \t\t\t\t\t\t\t\t\t? game.objects.bracket1.y + game.objects.bracket1.speed\n// \t\t\t\t\t\t\t\t\t: game.objects.bracket2.y + game.objects.bracket2.speed;\n\t\t\t\n// \t\t\t\t\t$.post(\"/matches/move_bracket/\" + MATCH_ID, { match_id: MATCH_ID,\n// \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey_code: kCode,\n// \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplayer: player,\n// \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbracket: bracket });\n// \t\t\t\t\t}\n// \t\t\t\t\tif (kCode === KEYS.up) {\n// \t\t\t\t\t\t\tlet bracket = (player == 1)\n// \t\t\t\t\t\t\t\t\t\t\t? game.objects.bracket1.y - game.objects.bracket1.speed\n// \t\t\t\t\t\t\t\t\t\t\t: game.objects.bracket2.y - game.objects.bracket2.speed;\n\t\t\t\t\t\t\t\n// \t\t\t\t\t\t\t$.post(\"/matches/move_bracket/\" + MATCH_ID, { match_id: MATCH_ID,\n// \t\t\t\t\t\t\t\t\t\t\tkey_code: kCode,\n// \t\t\t\t\t\t\t\t\t\t\tplayer: player,\n// \t\t\t\t\t\t\t\t\t\t\tbracket: bracket });\n// \t\t\t\t\t}\n// \t\t\t\t},\n\t\t\n// \t\t//Пуск шарика после гола\n// \t\tkickBall: function () {\n// \t\t\tthis.objects.ball.xspeed = 3;\n// \t\t\tthis.objects.ball.yspeed = 3;\n// \t\t\tthis.params.state = 'game';\n// \t\t},\n\n\t\t\n// \t\t//Стоп игра\n// \t\tstopGame: function () {\n// \t\t\t//Обновляем состояние\n// \t\t\tthis.params.state = 'stop';\n// \t\t\t//Останавливаем цикл\n// \t\t\tcancelAnimationFrame(this.requestLoop);\n\n// \t\t\t//Убираем слушателей событий\n// \t\t\tdocument.removeEventListener('keydown', this.keyDownEvent);\n\t\t\t\n// \t\t\t//Чистим игровые объекты\n// \t\t\tdelete(this.objects);\n// \t\t},\n\t\t\n// \t\tpauseGame: function () {\n// \t\t\tthis.state = 'pause';\n// \t\t},\n\n// \t\t\t//Рестарт игры\n// \t\trestartGame: function () {\n// \t\t\tthis.stopGame();\n// \t\t\tthis.startGame();\n// \t\t}\n// \t};\n\n//  // //При загрузке window, стартуем нашу игру\n// \tlet match_model = new App.Models.Match();\n// \tlet match_view = new App.Views.Match({ model: match_model });\n// }());"]},"metadata":{},"sourceType":"module"}