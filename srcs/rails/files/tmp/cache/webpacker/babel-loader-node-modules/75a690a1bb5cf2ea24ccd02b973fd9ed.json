{"ast":null,"code":"import consumer from \"./consumer\";\nvar subscribe = 0;\ndocument.addEventListener('turbolinks:load', function () {\n  var room_element = document.getElementById('room-id');\n  var room_id = room_element != null ? room_element.getAttribute('data-room-id') : -1;\n  if (subscribe) consumer.subscriptions.remove(subscribe);\n  subscribe = consumer.subscriptions.create({\n    channel: \"RoomChannel\",\n    room_id: room_id\n  }, {\n    connected: function connected() {\n      if (room_id > 0) console.log(\"Connected to room \" + room_id);\n    },\n    disconnected: function disconnected() {\n      if (room_id > 0) console.log(\"Disconnected from room \" + room_id);\n    },\n    received: function received(data) {\n      var user_element = document.getElementById('user-id');\n      var user_id = Number(user_element.getAttribute('data-user-id'));\n      var html;\n      var blocked = [];\n      fetch(\"/block_list\").then(function (res) {\n        return res.ok ? res.json() : Promise.reject(res);\n      }).then(function (blocked_user) {\n        for (var i = 0; blocked_user.length != i; i++) {\n          blocked.push(blocked_user[i].blocked_user_id);\n        }\n\n        if (user_id === data.message.user_id) {\n          html = data.mine;\n          var messageContainer = document.getElementById('messages');\n          messageContainer.innerHTML = messageContainer.innerHTML + html;\n        } else if (blocked.includes(data.message.user_id) === false) {\n          html = data.theirs;\n\n          var _messageContainer = document.getElementById('messages');\n\n          _messageContainer.innerHTML = _messageContainer.innerHTML + html;\n        }\n      });\n    }\n  });\n});","map":{"version":3,"sources":["/pingpong/app/javascript/channels/room_channel.js"],"names":["consumer","subscribe","document","addEventListener","room_element","getElementById","room_id","getAttribute","subscriptions","remove","create","channel","connected","console","log","disconnected","received","data","user_element","user_id","Number","html","blocked","fetch","then","res","ok","json","Promise","reject","blocked_user","i","length","push","blocked_user_id","message","mine","messageContainer","innerHTML","includes","theirs"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AAEA,IAAIC,SAAS,GAAG,CAAhB;AAEAC,QAAQ,CAACC,gBAAT,CAA0B,iBAA1B,EAA6C,YAAM;AAEjD,MAAMC,YAAY,GAAGF,QAAQ,CAACG,cAAT,CAAwB,SAAxB,CAArB;AACA,MAAMC,OAAO,GAAIF,YAAY,IAAI,IAAjB,GAAyBA,YAAY,CAACG,YAAb,CAA0B,cAA1B,CAAzB,GAAqE,CAAC,CAAtF;AAEA,MAAIN,SAAJ,EACED,QAAQ,CAACQ,aAAT,CAAuBC,MAAvB,CAA8BR,SAA9B;AAEFA,EAAAA,SAAS,GAAGD,QAAQ,CAACQ,aAAT,CAAuBE,MAAvB,CAA8B;AAAEC,IAAAA,OAAO,EAAE,aAAX;AAA0BL,IAAAA,OAAO,EAAEA;AAAnC,GAA9B,EAA4E;AACtFM,IAAAA,SADsF,uBAC1E;AACV,UAAIN,OAAO,GAAG,CAAd,EACEO,OAAO,CAACC,GAAR,CAAY,uBAAuBR,OAAnC;AACH,KAJqF;AAMtFS,IAAAA,YANsF,0BAMvE;AACb,UAAIT,OAAO,GAAG,CAAd,EACEO,OAAO,CAACC,GAAR,CAAY,4BAA4BR,OAAxC;AACH,KATqF;AAWtFU,IAAAA,QAXsF,oBAW7EC,IAX6E,EAWvE;AACb,UAAMC,YAAY,GAAGhB,QAAQ,CAACG,cAAT,CAAwB,SAAxB,CAArB;AACA,UAAMc,OAAO,GAAGC,MAAM,CAACF,YAAY,CAACX,YAAb,CAA0B,cAA1B,CAAD,CAAtB;AAEA,UAAIc,IAAJ;AACA,UAAIC,OAAO,GAAG,EAAd;AAEAC,MAAAA,KAAK,CAAC,aAAD,CAAL,CACCC,IADD,CACM,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACC,EAAJ,GAASD,GAAG,CAACE,IAAJ,EAAT,GAAsBC,OAAO,CAACC,MAAR,CAAeJ,GAAf,CAA1B;AAAA,OADT,EAECD,IAFD,CAEM,UAASM,YAAT,EAAuB;AAE3B,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBD,YAAY,CAACE,MAAb,IAAuBD,CAAvC,EAA0CA,CAAC,EAA3C,EAA+C;AAC7CT,UAAAA,OAAO,CAACW,IAAR,CAAaH,YAAY,CAACC,CAAD,CAAZ,CAAgBG,eAA7B;AACD;;AAED,YAAIf,OAAO,KAAKF,IAAI,CAACkB,OAAL,CAAahB,OAA7B,EAAsC;AACpCE,UAAAA,IAAI,GAAGJ,IAAI,CAACmB,IAAZ;AACA,cAAMC,gBAAgB,GAAGnC,QAAQ,CAACG,cAAT,CAAwB,UAAxB,CAAzB;AACAgC,UAAAA,gBAAgB,CAACC,SAAjB,GAA6BD,gBAAgB,CAACC,SAAjB,GAA6BjB,IAA1D;AACD,SAJD,MAIO,IAAIC,OAAO,CAACiB,QAAR,CAAiBtB,IAAI,CAACkB,OAAL,CAAahB,OAA9B,MAA2C,KAA/C,EAAsD;AAC3DE,UAAAA,IAAI,GAAGJ,IAAI,CAACuB,MAAZ;;AACA,cAAMH,iBAAgB,GAAGnC,QAAQ,CAACG,cAAT,CAAwB,UAAxB,CAAzB;;AACAgC,UAAAA,iBAAgB,CAACC,SAAjB,GAA6BD,iBAAgB,CAACC,SAAjB,GAA6BjB,IAA1D;AACD;AACF,OAjBD;AAkBD;AApCqF,GAA5E,CAAZ;AAsCD,CA9CD","sourcesContent":["import consumer from \"./consumer\"\n\nlet subscribe = 0;\n\ndocument.addEventListener('turbolinks:load', () => {\n\n  const room_element = document.getElementById('room-id');\n  const room_id = (room_element != null) ? room_element.getAttribute('data-room-id') : -1;\n\n  if (subscribe)\n    consumer.subscriptions.remove(subscribe)\n\n  subscribe = consumer.subscriptions.create({ channel: \"RoomChannel\", room_id: room_id }, {\n    connected() {\n      if (room_id > 0)\n        console.log(\"Connected to room \" + room_id);\n    },\n\n    disconnected() {\n      if (room_id > 0)\n        console.log(\"Disconnected from room \" + room_id);\n    },\n\n    received(data) {\n      const user_element = document.getElementById('user-id');\n      const user_id = Number(user_element.getAttribute('data-user-id'));\n\n      let html;\n      let blocked = [];\n\n      fetch(\"/block_list\")\n      .then(res => res.ok ? res.json() : Promise.reject(res))\n      .then(function(blocked_user) {\n\n        for (var i = 0; blocked_user.length != i; i++) {\n          blocked.push(blocked_user[i].blocked_user_id)\n        }\n\n        if (user_id === data.message.user_id) {\n          html = data.mine;\n          const messageContainer = document.getElementById('messages');\n          messageContainer.innerHTML = messageContainer.innerHTML + html;\n        } else if (blocked.includes(data.message.user_id) === false) {\n          html = data.theirs;\n          const messageContainer = document.getElementById('messages');\n          messageContainer.innerHTML = messageContainer.innerHTML + html;\n        }\n      })\n    }\n  });\n})\n"]},"metadata":{},"sourceType":"module"}