{"ast":null,"code":"var _require = require(\"underscore\"),\n    result = _require.result;\n\n$(function () {\n  window.App = {\n    Models: {},\n    Views: {},\n    Collections: {}\n  }; // -----------------------------------------\n  //  WARS       MODEL and COLLECTION\n  // -----------------------------------------\n\n  App.Models.War = Backbone.Model.extend({\n    urlRoot: \"/wars.json\",\n    initialize: function initialize() {}\n  });\n  App.Collections.War = Backbone.Collection.extend({\n    model: App.Models.War,\n    url: \"/wars.json\",\n    initialize: function initialize() {\n      this.fetch();\n    }\n  }); // ---------------------------------------------------------------------------------------------------------------------------\n  //                                             WARS TABLE\n  // ---------------------------------------------------------------------------------------------------------------------------\n  // -----------------------------------------\n  //  VIEW OF ONE TABLE\n  // -----------------------------------------\n\n  App.Views.TableWars = Backbone.View.extend({\n    template: _.template($(\"#WarsTableTemplate\").html()),\n    initialize: function initialize(data) {\n      this.collection = data.collection;\n      this.type = data.type;\n      this.collection.on('sync', this.render, this);\n    },\n    render: function render() {\n      this.$el.html(this.template({\n        type: this.type\n      }));\n      $(\"#\" + this.type + \"Wars\").html(this.el);\n      wars = new App.Views.Wars({\n        collection: this.collection,\n        type: this.type\n      });\n      wars.render();\n      return this;\n    }\n  }); // -----------------------------------------\n  //  VIEW OF INNER OF ONE TABLE\n  // -----------------------------------------\n\n  App.Views.Wars = Backbone.View.extend({\n    tagName: 'tbody',\n    initialize: function initialize(data) {\n      this.collection = data.collection;\n      this.type = data.type;\n    },\n    render: function render() {\n      this.collection.each(this.addOne, this);\n      $(\"#\" + this.type + \"WarsTable\").append(this.el);\n      return this;\n    },\n    addOne: function addOne(war) {\n      if (this.type == 'History') {\n        if (war.get('is_end') == true) {\n          var row = new App.Views.War({\n            model: war\n          });\n          this.$el.append(row.render().el);\n        }\n      } else if (this.type == 'Current') {\n        if (war.get('is_accepted') == true && war.get('is_inprogress') == true && war.get('is_end') == false) {\n          var row = new App.Views.War({\n            model: war\n          });\n          this.$el.append(row.render().el);\n        }\n      } else if (this.type == 'Planned') {\n        if (war.get('is_accepted') == true && war.get('is_inprogress') == false && war.get('is_end') == false) {\n          var row = new App.Views.War({\n            model: war\n          });\n          this.$el.append(row.render().el);\n        }\n      }\n    }\n  }); // -----------------------------------------\n  //  VIEW OF ONE ROW\n  // -----------------------------------------\n\n  App.Views.War = Backbone.View.extend({\n    template: _.template($(\"#WarsRowTemplate\").html()),\n    tagName: 'tr',\n    render: function render() {\n      this.model.attributes.start_date = new Date(this.model.attributes.start);\n      this.model.attributes.end_date = new Date(this.model.attributes.end);\n      this.model.attributes.addon_type = '';\n      if (this.model.attributes.addons.addon3 == true) this.model.attributes.addon_type = 'boost ';\n      if (this.model.attributes.addons.addon1 == true) this.model.attributes.addon_type += 'disco';else if (this.model.attributes.addons.addon2 == true) this.model.attributes.addon_type += 'epilepsy';\n      if (this.model.attributes.addon_type == '') this.model.attributes.addon_type = 'none';\n      this.$el.html(this.template(this.model.attributes));\n      return this;\n    }\n  });\n  /*\n  ** Выпадающий список со всеми пользователями для формы создания матча\n  */\n\n  App.Models.AllGuilds = Backbone.Model.extend({\n    urlRoot: \"/guilds_list\"\n  });\n  App.Collections.AllGuilds = Backbone.Collection.extend({\n    url: \"/guilds_list\",\n    model: App.Models.AllGuilds,\n    initialize: function initialize() {\n      this.fetch();\n    }\n  });\n  App.Views.AllGuilds = Backbone.View.extend({\n    initialize: function initialize() {\n      this.collection.on('sync', this.render, this);\n    },\n    render: function render() {\n      $('#formGuild2Name').css('color', 'rgba(0, 0, 0, 0.55)');\n      $('#formGuild2Name').append(\"<option value='' disabled selected>Guildname of your opponent</option>\");\n      this.collection.each(function (it) {\n        var name = it.get(\"name\");\n        $('#formGuild2Name').append(\"<option value='\".concat(name, \"'>\").concat(name, \"</option>\"));\n      });\n      return this;\n    }\n  }); // ---------------------------------------------------------------------------------------------------------------------------\n  //                                           WARS CREATION FORM\n  // ---------------------------------------------------------------------------------------------------------------------------\n\n  App.Views.FormWar = Backbone.View.extend({\n    template: _.template($(\"#WarCreateTemplate\").html()),\n    initialize: function initialize() {\n      this.$el.html(this.template());\n      $(\"#WarCreationForm\").html(this.el);\n    },\n    events: {\n      'submit': 'submit'\n    },\n    submit: function submit(e) {\n      e.preventDefault();\n      console.log('here');\n      var war = {\n        guild2: $(e.currentTarget).find('select[id=formGuild2Name]').val(),\n        date_start: $(e.currentTarget).find('input[id=formWarDateStart]').val(),\n        time_start: $(e.currentTarget).find('input[id=formWarTimeStart]').val(),\n        date_end: $(e.currentTarget).find('input[id=formWarDateEnd]').val(),\n        time_end: $(e.currentTarget).find('input[id=formWarTimeEnd]').val(),\n        color: $(e.currentTarget).find('input[name=\"radioColor\"]:checked').val(),\n        boost: $('#AddonBoost').is(':checked') ? $('#AddonBoost').val() : '',\n        prize: $(e.currentTarget).find('input[id=formPrize]').val(),\n        max_ananswered: $(e.currentTarget).find('input[id=formMaxUnanswered]').val()\n      };\n      if (war.prize == '') war.prize = 0;\n      fetch(\"/wars\", {\n        method: \"POST\",\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(war)\n      }).then(function (res) {\n        return res.json();\n      }).then(_.bind(function (res) {\n        if (res.error) alert(res.error);else alert('You successfully sent an invitation to a war!');\n      }, this));\n    }\n  }); // ---------------------------------------------------------------------------------------------------------------------------\n  //                                            MAIN\n  // ---------------------------------------------------------------------------------------------------------------------------\n\n  var col = new App.Collections.War();\n  new App.Views.FormWar();\n  currentTable = new App.Views.TableWars({\n    collection: col,\n    type: 'Current'\n  });\n  plannedTable = new App.Views.TableWars({\n    collection: col,\n    type: 'Planned'\n  });\n  historyTable = new App.Views.TableWars({\n    collection: col,\n    type: 'History'\n  });\n  var guild_list = new App.Collections.AllGuilds();\n  new App.Views.AllGuilds({\n    collection: guild_list\n  });\n  $(\"#WarsTableRefresh\").on(\"click\", function () {\n    col.fetch();\n  });\n}());","map":{"version":3,"sources":["/pingpong/app/javascript/packs/wars.js"],"names":["require","result","$","window","App","Models","Views","Collections","War","Backbone","Model","extend","urlRoot","initialize","Collection","model","url","fetch","TableWars","View","template","_","html","data","collection","type","on","render","$el","el","wars","Wars","tagName","each","addOne","append","war","get","row","attributes","start_date","Date","start","end_date","end","addon_type","addons","addon3","addon1","addon2","AllGuilds","css","it","name","FormWar","events","submit","e","preventDefault","console","log","guild2","currentTarget","find","val","date_start","time_start","date_end","time_end","color","boost","is","prize","max_ananswered","method","headers","body","JSON","stringify","then","res","json","bind","error","alert","col","currentTable","plannedTable","historyTable","guild_list"],"mappings":"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","sourcesContent":["const { result } = require(\"underscore\");\n\n$(function () {\n\twindow.App = {\n\t\tModels: {},\n\t\tViews: {},\n\t\tCollections: {}\n\t};\n\n\n// -----------------------------------------\n//  WARS       MODEL and COLLECTION\n// -----------------------------------------\n\tApp.Models.War = Backbone.Model.extend({\n\t\turlRoot: \"/wars.json\",\n\t\tinitialize: function () {\n\t\t}\n\t});\n\n\tApp.Collections.War = Backbone.Collection.extend({\n\t\tmodel: App.Models.War,\n\t\turl: \"/wars.json\",\n\t\tinitialize: function () {\n\t\t\tthis.fetch()\n\t\t}\n\t});\n\n// ---------------------------------------------------------------------------------------------------------------------------\n//                                             WARS TABLE\n// ---------------------------------------------------------------------------------------------------------------------------\n\n\t// -----------------------------------------\n\t//  VIEW OF ONE TABLE\n\t// -----------------------------------------\n\tApp.Views.TableWars = Backbone.View.extend({\n\t\ttemplate: _.template($(\"#WarsTableTemplate\").html()),\n\t\tinitialize: function (data) {\n\t\t\tthis.collection = data.collection\n\t\t\tthis.type = data.type\n\n\t\t\tthis.collection.on('sync', this.render, this)\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html(this.template({ type: this.type }))\n\t\t\t$(\"#\" + this.type + \"Wars\").html(this.el)\n\t\t\twars = new App.Views.Wars({ collection: this.collection, type: this.type })\n\t\t\twars.render()\n\t\t\treturn this\n\t\t},\n\t})\n\t\n\t\n\t// -----------------------------------------\n\t//  VIEW OF INNER OF ONE TABLE\n\t// -----------------------------------------\n\tApp.Views.Wars = Backbone.View.extend({\n\t\ttagName: 'tbody',\n\t\tinitialize: function (data) {\n\t\t\tthis.collection = data.collection\n\t\t\tthis.type = data.type\n\t\t},\n\t\trender: function () {\n\t\t\tthis.collection.each(this.addOne, this)\n\t\t\t$(\"#\" + this.type + \"WarsTable\").append(this.el)\n\t\t\treturn this\n\t\t},\n\t\taddOne: function (war) {\n\t\t\tif (this.type == 'History') {\n\t\t\t\tif (war.get('is_end') == true) {\n\t\t\t\t\tvar row = new App.Views.War({ model: war });\n\t\t\t\t\tthis.$el.append(row.render().el);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.type == 'Current') {\n\t\t\t\tif (war.get('is_accepted') == true && war.get('is_inprogress') == true && war.get('is_end') == false) {\n\t\t\t\t\tvar row = new App.Views.War({ model: war });\n\t\t\t\t\tthis.$el.append(row.render().el);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.type == 'Planned') {\n\t\t\t\tif (war.get('is_accepted') == true && war.get('is_inprogress') == false && war.get('is_end') == false) {\n\t\t\t\t\tvar row = new App.Views.War({ model: war });\n\t\t\t\t\tthis.$el.append(row.render().el);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\n\t// -----------------------------------------\n\t//  VIEW OF ONE ROW\n\t// -----------------------------------------\n\tApp.Views.War = Backbone.View.extend({\n\t\ttemplate: _.template($(\"#WarsRowTemplate\").html()),\n\t\ttagName: 'tr',\n\t\trender: function () {\n\t\t\tthis.model.attributes.start_date = new Date(this.model.attributes.start)\n\t\t\tthis.model.attributes.end_date = new Date(this.model.attributes.end)\n\t\t\tthis.model.attributes.addon_type = ''\n\t\t\tif (this.model.attributes.addons.addon3 == true)\n\t\t\t\tthis.model.attributes.addon_type = 'boost '\n\t\t\tif (this.model.attributes.addons.addon1 == true)\n\t\t\t\tthis.model.attributes.addon_type += 'disco'\n\t\t\telse if (this.model.attributes.addons.addon2 == true)\n\t\t\t\tthis.model.attributes.addon_type += 'epilepsy'\n\t\t\tif (this.model.attributes.addon_type == '')\n\t\t\t\tthis.model.attributes.addon_type = 'none'\n\t\t\tthis.$el.html(this.template(this.model.attributes))\n\t\t\treturn this;\n\t\t}\n\t});\n\n/*\n** Выпадающий список со всеми пользователями для формы создания матча\n*/\n\tApp.Models.AllGuilds = Backbone.Model.extend({ urlRoot: \"/guilds_list\" })\n\tApp.Collections.AllGuilds = Backbone.Collection.extend({\n\t\turl: \"/guilds_list\",\n\t\tmodel: App.Models.AllGuilds,\n\t\tinitialize: function() { this.fetch(); },\n\t});\n\n\tApp.Views.AllGuilds = Backbone.View.extend({\n\t\tinitialize: function() {\n\t\t\tthis.collection.on('sync', this.render, this)\n\t\t},\n        render: function () {\n\t\t\t$('#formGuild2Name').css('color', 'rgba(0, 0, 0, 0.55)');\n\t\t\t$('#formGuild2Name').append(`<option value='' disabled selected>Guildname of your opponent</option>`);\n            this.collection.each((it) => {\n\t\t\t\tvar name = it.get(\"name\");\n\t\t\t\t$('#formGuild2Name').append(`<option value='${name}'>${name}</option>`);\n\t\t\t});\n            return this;\n        }\n    });\n\n\n// ---------------------------------------------------------------------------------------------------------------------------\n//                                           WARS CREATION FORM\n// ---------------------------------------------------------------------------------------------------------------------------\n\n\tApp.Views.FormWar = Backbone.View.extend({\n\t\ttemplate: _.template($(\"#WarCreateTemplate\").html()),\n\t\tinitialize: function () {\n\t\t\tthis.$el.html(this.template())\n\t\t\t$(\"#WarCreationForm\").html(this.el)\n\t\t},\n\t\tevents: {\n\t\t\t'submit': 'submit'\n\t\t},\n\t\tsubmit: function (e) {\n\t\t\te.preventDefault();\n\t\t\tconsole.log('here')\n\t\t\tlet war = {\n\t\t\t\tguild2: \t\t$(e.currentTarget).find('select[id=formGuild2Name]').val(),\n\t\t\t\tdate_start: \t$(e.currentTarget).find('input[id=formWarDateStart]').val(),\n\t\t\t\ttime_start: \t$(e.currentTarget).find('input[id=formWarTimeStart]').val(),\n\t\t\t\tdate_end: \t\t$(e.currentTarget).find('input[id=formWarDateEnd]').val(),\n\t\t\t\ttime_end: \t\t$(e.currentTarget).find('input[id=formWarTimeEnd]').val(),\n\t\t\t\tcolor:\t\t\t$(e.currentTarget).find('input[name=\"radioColor\"]:checked').val(),\n\t\t\t\tboost:\t\t\t$('#AddonBoost').is(':checked') ? $('#AddonBoost').val() : '',\n\t\t\t\tprize: \t\t\t$(e.currentTarget).find('input[id=formPrize]').val(),\n\t\t\t\tmax_ananswered: $(e.currentTarget).find('input[id=formMaxUnanswered]').val(),\n\t\t\t}\n\t\t\tif (war.prize == '')\n\t\t\t\twar.prize = 0\n\t\t\tfetch(\"/wars\", {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: {\n\t\t\t\t\t'Accept': 'application/json',\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify(war)\n\t\t\t})\n\t\t\t\t.then(res => res.json())\n\t\t\t\t.then(_.bind((res) => {\n\t\t\t\t\tif (res.error)\n\t\t\t\t\t\talert(res.error)\n\t\t\t\t\telse\n\t\t\t\t\t\talert('You successfully sent an invitation to a war!')\n\t\t\t\t}, this))\n\t\t},\n\t})\n\n// ---------------------------------------------------------------------------------------------------------------------------\n//                                            MAIN\n// ---------------------------------------------------------------------------------------------------------------------------\n\n\tvar col = new App.Collections.War()\n\tnew App.Views.FormWar()\n\tcurrentTable = new App.Views.TableWars({ collection: col, type: 'Current' })\n\tplannedTable = new App.Views.TableWars({ collection: col, type: 'Planned' })\n\thistoryTable = new App.Views.TableWars({ collection: col, type: 'History' })\n\t\n\tvar guild_list = new App.Collections.AllGuilds()\n\tnew App.Views.AllGuilds({ collection: guild_list });\n\t$(\"#WarsTableRefresh\").on(\"click\", function() { col.fetch(); })\n\n}());\n"]},"metadata":{},"sourceType":"module"}