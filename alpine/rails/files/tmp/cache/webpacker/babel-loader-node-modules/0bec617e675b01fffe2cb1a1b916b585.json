{"ast":null,"code":"$(function () {\n  window.App = {\n    Models: {},\n    Views: {},\n    Collections: {},\n    Router: {}\n  };\n  App.Models.Guild = Backbone.Model.extend({\n    urlRoot: 'http://localhost:3000/guilds',\n    initialize: function initialize(curr_guild) {\n      this.id = curr_guild.id;\n      this.name = curr_guild.name;\n      this.anagram = curr_guild.anagram;\n      this.score = curr_guild.score;\n      this.owner_id = curr_guild.owner_id;\n      this.created_at = curr_guild.created_at;\n      this.updated_at = curr_guild.updated_at;\n    }\n  });\n  App.Collections.Guild = Backbone.Collection.extend({\n    model: App.Models.Guild,\n    url: 'http://localhost:3000/guilds',\n    initialize: function initialize() {\n      this.fetch();\n    }\n  });\n  App.Views.Guild = Backbone.View.extend({\n    tagName: 'a',\n    className: 'list-group-item list-group-item-action',\n    templateList: _.template($(\"#GuildListTemplate\").html()),\n    templateCard: _.template($(\"#GuildCardTemplate\").html()),\n    templateDeleteBtn: _.template($(\"#GuildDelBtnTemplate\").html()),\n    initialize: function initialize(data) {\n      this.model = data.model;\n      this.user_id = data.user_id;\n      this.model.on('destroy', this.remove, this);\n      this.model.on('click', this.showCard, this);\n    },\n    events: {\n      'click #delete_guild': 'delete_guild',\n      'click #GuildNameList': 'showCard'\n    },\n    render: function render() {\n      this.$el.attr({\n        'data-bs-toggle': \"list\"\n      });\n      var template = this.templateList(this.model);\n      this.$el.append(template);\n      return this;\n    },\n    showCard: function showCard() {\n      var template = this.templateCard(this.model);\n\n      if (this.user_id == this.model.owner_id) {\n        $('#GuildDeleteBtn').html(this.templateDeleteBtn);\n        alert(this.user_id + \"-\" + this.model.owner_id);\n      } else {\n        $('#GuildDeleteBtn').html(\"111111111111111\");\n        alert(\"fail\" + this.user_id + \"-\" + this.model.owner_id);\n      }\n\n      $('#GuildCard').html(template);\n      return this;\n    },\n    remove: function remove() {\n      this.$el.remove();\n    },\n    delete_guild: function delete_guild() {\n      var promise = this.model.destroy([], {\n        dataType: \"text\"\n      });\n      $.when(promise).done(_.bind(function (data) {\n        $('#GuildForm').css({\n          \"display\": \"block\"\n        });\n      }, this));\n    }\n  });\n  App.Views.Guilds = Backbone.View.extend({\n    className: 'list-group',\n    initialize: function initialize(data) {\n      this.collection = data.collection;\n      this.user_id = data.user_id;\n      this.collection.on('add', this.addOne, this);\n      this.collection.on('change', this.addOne, this);\n      this.render();\n    },\n    render: function render() {\n      this.collection.each(this.addOne, this, this.user_id);\n      alert(\"render \" + this.user_id);\n      $('#GuildList').append(this.el);\n      return this;\n    },\n    addOne: function addOne(guild, user_id) {\n      console.log(guild.name);\n      var guildView = new App.Views.Guild({\n        model: guild,\n        user_id: user_id\n      });\n      this.$el.append(guildView.render().el);\n    }\n  });\n  App.Views.NewGuild = Backbone.View.extend({\n    template: _.template($(\"#GuildFormTemplate\").html()),\n    // initialize: function () {\n    // \tthis.$el.html(this.template)\n    // },\n    events: {\n      'submit': 'submit'\n    },\n    render: function render() {\n      this.$el.html(this.template);\n      $('#GuildForm').html(this.el);\n    },\n    submit: function submit(e) {\n      e.preventDefault();\n      var guild = {\n        name: $(e.currentTarget).find('input[id=guildFormName]').val(),\n        anagram: $(e.currentTarget).find('input[id=guildFormAnagram]').val()\n      };\n      new_guild = new App.Models.Guild(guild);\n      var promise = new_guild.save([], {\n        dataType: \"text\"\n      });\n      $.when(promise).done(_.bind(function (data) {\n        alert('success');\n        this.collection.fetch();\n        $('#GuildForm').css({\n          \"display\": \"none\"\n        });\n      }, this));\n      $.when(promise).fail(function (resp) {\n        alert(resp.responseText);\n      }); // new_guild.save({}, {\n      // \tdataType:\"text\",\n      // \tsuccess: function (model, response) {\n      // \t\talert(\"success\");\n      // \t\tthis.collection.fetch()\n      // \t},\n      // \terror: function (model, response) {\n      // \t\talert(\"error\");\n      // \t}\n      // });\n      // .success(response => {\n      // \talert('success')\n      // })\n      // .then(res => res.ok ? alert('ok') : Promise.reject(res))\n      // .then(resp => {\n      // \tconsole.log('then')\n      // \tconsole.log(resp)\n      // })\n      // .catch(response => {\n      // \tconsole.log('catch')\n      // \t// console.log(response)\n      // \tthis.collection.fetch()\n      // })\n      // new_guild.changedAttributes()\n      // this.collection.fetch()\n      // alert(new_guild.name + new_guild.owner_id)\n      // new_guild.sync()\n      // alert(new_guild.name + new_guild.owner_id)\n      // fetch(\"http://localhost:3000/create_new_guild\", {\n      // \tmethod: \"POST\",\n      // \theaders: {\n      // \t\t'Accept': 'application/json',\n      // \t\t'Content-Type': 'application/json'\n      // \t},\n      // \tbody: JSON.stringify(guild)\n      // })\n      // .then(res => res.ok ? res.json() : Promise.reject(res))\n      // .then(user => {\n      // \tnew_guild = new App.Models.Guild(guild);\n      // \tthis.collection.add(new_user);\n      // })\n      // .catch(() => {\n      // \talert('Error! Unable to create guild!')\n      // })\n    }\n  });\n  fetch(\"http://localhost:3000/get_curr_user\").then(function (res) {\n    return res.ok ? res.json() : Promise.reject(res);\n  }).then(function (curr_user_id) {\n    col = new App.Collections.Guild();\n    form = new App.Views.NewGuild({\n      collection: col\n    });\n    form.render();\n    guilds_view = new App.Views.Guilds({\n      collection: col,\n      user_id: curr_user_id\n    });\n  });\n}());","map":{"version":3,"sources":["/pingpong/app/javascript/packs/index.js"],"names":["$","window","App","Models","Views","Collections","Router","Guild","Backbone","Model","extend","urlRoot","initialize","curr_guild","id","name","anagram","score","owner_id","created_at","updated_at","Collection","model","url","fetch","View","tagName","className","templateList","_","template","html","templateCard","templateDeleteBtn","data","user_id","on","remove","showCard","events","render","$el","attr","append","alert","delete_guild","promise","destroy","dataType","when","done","bind","css","Guilds","collection","addOne","each","el","guild","console","log","guildView","NewGuild","submit","e","preventDefault","currentTarget","find","val","new_guild","save","fail","resp","responseText","then","res","ok","json","Promise","reject","curr_user_id","col","form","guilds_view"],"mappings":"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","sourcesContent":["$(function () {\n\twindow.App = {\n\t\tModels: {},\n\t\tViews: {},\n\t\tCollections: {},\n\t\tRouter: {}\n\t};\n\n\tApp.Models.Guild = Backbone.Model.extend({\n\t\turlRoot: 'http://localhost:3000/guilds',\n\t\tinitialize: function (curr_guild) {\n\t\t\tthis.id = curr_guild.id;\n\t\t\tthis.name = curr_guild.name;\n\t\t\tthis.anagram = curr_guild.anagram;\n\t\t\tthis.score = curr_guild.score;\n\t\t\tthis.owner_id = curr_guild.owner_id;\n\t\t\tthis.created_at = curr_guild.created_at;\n\t\t\tthis.updated_at = curr_guild.updated_at;\n\t\t}\n\t});\n\n\tApp.Collections.Guild = Backbone.Collection.extend({\n\t\tmodel: App.Models.Guild,\n\t\turl: 'http://localhost:3000/guilds',\n\t\tinitialize: function () {\n\t\t\tthis.fetch();\n\t\t}\n\t});\n\t\n\tApp.Views.Guild = Backbone.View.extend({\n\t\ttagName: 'a',\n\t\tclassName: 'list-group-item list-group-item-action',\n\n\t\ttemplateList: _.template($(\"#GuildListTemplate\").html()),\n\t\ttemplateCard: _.template($(\"#GuildCardTemplate\").html()),\n\t\ttemplateDeleteBtn: _.template($(\"#GuildDelBtnTemplate\").html()),\n\t\tinitialize: function (data) {\n\t\t\tthis.model = data.model;\n\t\t\tthis.user_id = data.user_id;\n\n\t\t\tthis.model.on('destroy', this.remove, this);\n\t\t\tthis.model.on('click', this.showCard, this);\n\t\t},\n\t\tevents: {\n\t\t\t'click #delete_guild': 'delete_guild',\n\t\t\t'click #GuildNameList' : 'showCard'\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.attr({'data-bs-toggle': \"list\"});\n\t\t\tvar template = this.templateList(this.model);\n\t\t\tthis.$el.append(template);\n\t\t\treturn this;\n\t\t},\n\t\tshowCard: function () {\n\t\t\tvar template = this.templateCard(this.model);\n\t\t\tif (this.user_id == this.model.owner_id)\n\t\t\t{\n\t\t\t\t$('#GuildDeleteBtn').html(this.templateDeleteBtn);\n\t\t\t\talert(this.user_id + \"-\" + this.model.owner_id);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$('#GuildDeleteBtn').html(\"111111111111111\");\n\t\t\t\talert(\"fail\" + this.user_id + \"-\" + this.model.owner_id);\n\t\t\t}\n\t\t\t\n\t\t\t$('#GuildCard').html(template);\n\t\t\treturn this;\n\t\t},\n\t\tremove: function () {\n\t\t\tthis.$el.remove();\n\t\t},\n\t\tdelete_guild: function () {\n\t\t\t\n\t\t\tvar promise = this.model.destroy([], {\n\t\t\t\tdataType: \"text\"\n\t\t\t})\n\t\t\t\n\t\t\t$.when(promise).done(\n\t\t\t\t_.bind(function (data) {\n\t\t\t\t\t$('#GuildForm').css({ \"display\": \"block\" });\n\t\t\t\t}, this)\n\t\t\t\t);\n\t\t}\n\t})\n\n\tApp.Views.Guilds = Backbone.View.extend({\n\t\tclassName: 'list-group',\n\t\tinitialize: function (data) {\n\t\t\tthis.collection = data.collection;\n\t\t\tthis.user_id = data.user_id;\n\n\t\t\tthis.collection.on('add', this.addOne, this);\n\t\t\tthis.collection.on('change', this.addOne, this);\n\t\t\tthis.render();\n\t\t},\n\t\trender: function () {\n\t\t\tthis.collection.each(this.addOne, this, this.user_id);\n\t\t\talert(\"render \" + this.user_id);\n\t\t\t$('#GuildList').append(this.el);\n\t\t\treturn this;\n\t\t},\n\t\taddOne: function (guild, user_id) {\n\t\t\tconsole.log(guild.name);\n\t\t\tvar guildView = new App.Views.Guild({ model: guild, user_id: user_id });\n\t\t\tthis.$el.append(guildView.render().el);\n\t\t}\n\t});\n\n\tApp.Views.NewGuild = Backbone.View.extend({\n\t\ttemplate: _.template($(\"#GuildFormTemplate\").html()),\n\t\t// initialize: function () {\n\t\t// \tthis.$el.html(this.template)\n\t\t// },\n\t\tevents: {\n\t\t\t'submit': 'submit'\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html(this.template) \n\t\t\t$('#GuildForm').html(this.el);\n\t\t},\n\t\tsubmit: function (e) {\n\t\t\te.preventDefault();\n\t\t\tlet guild = {\n\t\t\t\tname: $(e.currentTarget).find('input[id=guildFormName]').val(),\n\t\t\t\tanagram: $(e.currentTarget).find('input[id=guildFormAnagram]').val()\n\t\t\t}\n\t\t\tnew_guild = new App.Models.Guild(guild);\n\n\t\t\tvar promise = new_guild.save([], {\n\t\t\t\tdataType: \"text\"\n\t\t\t})\n\n\t\t\t$.when(promise).done(\n\t\t\t\t_.bind(function (data) {\n    \t\t\t\talert('success');\n\t\t\t\t\tthis.collection.fetch()\n\t\t\t\t\t$('#GuildForm').css({ \"display\": \"none\" });\n\t\t\t\t}, this)\n\t\t\t);\n\n\t\t\t$.when(promise).fail(function (resp) {\n\t\t\t\talert(resp.responseText);\n\t\t\t});\n\n\n\t\t\t// new_guild.save({}, {\n\t\t\t// \tdataType:\"text\",\n\t\t\t// \tsuccess: function (model, response) {\n\t\t\t// \t\talert(\"success\");\n\t\t\t// \t\tthis.collection.fetch()\n\t\t\t// \t},\n\t\t\t// \terror: function (model, response) {\n\t\t\t// \t\talert(\"error\");\n\t\t\t// \t}\n\t\t\t// });\n\n\n\t\t\t// .success(response => {\n\t\t\t// \talert('success')\n\t\t\t// })\n\t\t\t// .then(res => res.ok ? alert('ok') : Promise.reject(res))\n\t\t\t// .then(resp => {\n\t\t\t// \tconsole.log('then')\n\t\t\t// \tconsole.log(resp)\n\t\t\t// })\n\t\t\t// .catch(response => {\n\t\t\t// \tconsole.log('catch')\n\t\t\t// \t// console.log(response)\n\t\t\t// \tthis.collection.fetch()\n\t\t\t// })\n\t\t\t// new_guild.changedAttributes()\n\t\t\t// this.collection.fetch()\n\t\t\t// alert(new_guild.name + new_guild.owner_id)\n\t\t\t// new_guild.sync()\n\t\t\t// alert(new_guild.name + new_guild.owner_id)\n\t\t\t// fetch(\"http://localhost:3000/create_new_guild\", {\n\t\t\t// \tmethod: \"POST\",\n\t\t\t// \theaders: {\n\t\t\t// \t\t'Accept': 'application/json',\n\t\t\t// \t\t'Content-Type': 'application/json'\n\t\t\t// \t},\n\t\t\t// \tbody: JSON.stringify(guild)\n\t\t\t// })\n\t\t\t// .then(res => res.ok ? res.json() : Promise.reject(res))\n\t\t\t// .then(user => {\n\t\t\t// \tnew_guild = new App.Models.Guild(guild);\n\t\t\t// \tthis.collection.add(new_user);\n\t\t\t// })\n\t\t\t// .catch(() => {\n\t\t\t// \talert('Error! Unable to create guild!')\n\t\t\t// })\n\t\t},\n\n\t})\n\tfetch(\"http://localhost:3000/get_curr_user\")\n\t.then(res => res.ok ? res.json() : Promise.reject(res))\n\t.then(function(curr_user_id) {\n\t\tcol = new App.Collections.Guild();\n\t\tform = new App.Views.NewGuild({ collection: col });\n\t\tform.render();\n\t\tguilds_view = new App.Views.Guilds( {collection: col, user_id: curr_user_id} );\n\t})\t\n}());"]},"metadata":{},"sourceType":"module"}